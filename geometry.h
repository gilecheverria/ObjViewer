// Constant definitions

#define SHORT_PI        3.1416
#define PI              3.141592653589793238462643383279502884197169399375105820974944592308
#define EPSILON         1E-10


// Type definitions

typedef enum {CW, CCW, COL}     spinType;
typedef enum {NORMAL, INTER, VISITED}	vectorType;

// Data structures for geometry concepts

// SEGMENT
typedef struct segmentStruct
{
	int			info;
	int			vertex1;
	int			vertex2;
	// double		slope;
} segmentStruct;

typedef segmentStruct* segmentPtr;

// VECTOR
typedef struct vectorStruct
{
	int			vectorId;
	double		i;
	double		j;
	double		k;
	vectorType	type;
} vectorStruct;

typedef vectorStruct* vectorPtr;




// Find the smallest of two numbers
double getMin (double first, double second);

// Find the largest of two numbers
double getMax (double first, double second);

double distance2Vertices (vertexStruct vertex1, vertexStruct vertex2);

// Returns the square of the distance between 2 vertices.
double squareDistance (vertexStruct vertex1, vertexStruct vertex2);

// Allocate memory and fill in the data for a segment structure.
segmentPtr createSegment (int vertex1, int vertex2, int info);

// Find the components of a vector, enclosed between two vertices.
vectorPtr vectorFromVertices (vertexPtr vertex1, vertexPtr vertex2);

// Find the angle formed by three vertices, by creating 2 vectors.
double angleBetweenVertices (vertexStruct vertex1, vertexStruct vertex2, vertexStruct vertex3);

// Compute the angle between two vectors.
double angleBetweenVectors (vectorPtr vector1, vectorPtr vector2);

// Obtain the dot product of two vectors.
double dotProduct (vectorPtr vector1, vectorPtr vector2);

// Compute the cross product of two vectors.
vectorPtr crossProduct (vectorPtr vector1, vectorPtr vector2);

// Sum two vectors.
vectorPtr sumVectors (vectorPtr vector1, vectorPtr vector2);

// Alter the size of a normal vector, to make it equal to 1.
void normalizeVector (vectorPtr vector);

// Compute the length of a vector.
double vectorLength (vectorPtr vector);

// Get the orientation of the triangle formed by three vertices.
// This is done by obtaining the slopes of the two segments generated by the vertices.
spinType orientationFromVertices_2D (vertexStruct vertex1, vertexStruct vertex2, vertexStruct vertex3);

// Compute the slope of a segment structure.
double slopeFromSegment_2D (segmentPtr segment);

// Compute the slope of aline joining two vertices.
double slopeFromVertices_2D (vertexPtr vertex1, vertexPtr vertex2);

// Check whether two segments intersect each other.
boolean testSegmentsIntersect_2D (vertexStruct vertexA1, vertexStruct vertexA2, vertexStruct vertexB1, vertexStruct vertexB2);

// Check whether two segments intersect each other.
boolean testSegmentsIntersect_NotInclusive_2D (vertexStruct vertexA1, vertexStruct vertexA2, vertexStruct vertexB1, vertexStruct vertexB2);

// Test whether a segment intersects any of the segments in a curve.
boolean testSegmentCurveIntersect (vertexPtr vertexArray, nodePtr curve, vertexStruct vertex1, vertexStruct vertex2);

// Check which of two collinear vertices is farther from a reference vertex
// Returns the vertexId of the vertex that is farther away.
int findFarCollinearVertex (vertexStruct vertex1, vertexStruct vertex2, vertexStruct vertex3);

// Find the distance from a vertex to the segment defined within two other vertices.
// It returns the distance if the vertex is in front of the segment. If not, returns -1.
double distanceVertexToSegment (vertexStruct vertex, vertexStruct segmentVertex1, vertexStruct segmentVertex2);

// Print the contents of a list of vectors.
void printVectorList (nodePtr list);
